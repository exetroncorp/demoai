{
  "messages": [
    {
      "role": "system",
      "content": "<important_rules>\n  You are in agent mode.\n\n  Always include the language and file name in the info string when you write code blocks.\n  If you are editing \"src/main.py\" for example, your code block should start with '```python src/main.py'\n\n  When addressing code modification requests, present a concise code snippet that\n  emphasizes only the necessary changes and uses abbreviated placeholders for\n  unmodified sections. For example:\n\n  ```language /path/to/file\n  // ... existing code ...\n\n  {{ modified code here }}\n\n  // ... existing code ...\n\n  {{ another modification }}\n\n  // ... rest of code ...\n  ```\n\n  In existing files, you should always restate the function or class that the snippet belongs to:\n\n  ```language /path/to/file\n  // ... existing code ...\n\n  function exampleFunction() {\n    // ... existing code ...\n\n    {{ modified code here }}\n\n    // ... rest of function ...\n  }\n\n  // ... rest of code ...\n  ```\n\n  Since users have access to their complete file, they prefer reading only the\n  relevant modifications. It's perfectly acceptable to omit unmodified portions\n  at the beginning, middle, or end of files using these \"lazy\" comments. Only\n  provide the complete file when explicitly requested. Include a concise explanation\n  of changes unless the user specifically asks for code only.\n\n</important_rules>"
    },
    {
      "role": "user",
      "content": "List files here"
    },
    {
      "role": "assistant",
      "content": " ",
      "tool_calls": [
        {
          "id": "83LEU4tgJ",
          "function": {
            "name": "builtin_ls",
            "arguments": "{\"dirPath\": \"/\", \"recursive\": false}"
          }
        }
      ]
    },
    {
      "role": "tool",
      "content": "=2.0.0\nlitellm_payload_logger.py\npackage.json\npom.xml\nsrc/\ntoto.txt\nzoubida.txt\nzoubizraeta\nzoubizrsssaeta\nzoudbai.txt",
      "tool_call_id": "83LEU4tgJ"
    }
  ],
  "model": "codestral-latest",
  "max_tokens": 4096,
  "stream": true,
  "tools": [
    {
      "type": "function",
      "function": {
        "name": "builtin_read_file",
        "description": "Use this tool if you need to view the contents of an existing file.",
        "parameters": {
          "type": "object",
          "required": [
            "filepath"
          ],
          "properties": {
            "filepath": {
              "type": "string",
              "description": "The path of the file to read, relative to the root of the workspace (NOT uri or absolute path)"
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "builtin_edit_existing_file",
        "description": "Use this tool to edit an existing file. If you don't know the contents of the file, read it first.",
        "parameters": {
          "type": "object",
          "required": [
            "filepath",
            "changes"
          ],
          "properties": {
            "filepath": {
              "type": "string",
              "description": "The path of the file to edit, relative to the root of the workspace."
            },
            "changes": {
              "type": "string",
              "description": "Any modifications to the file, showing only needed changes. Do NOT wrap this in a codeblock or write anything besides the code changes. In larger files, use brief language-appropriate placeholders for large unmodified sections, e.g. '// ... existing code ...'"
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "builtin_create_new_file",
        "description": "Create a new file. Only use this when a file doesn't exist and should be created",
        "parameters": {
          "type": "object",
          "required": [
            "filepath",
            "contents"
          ],
          "properties": {
            "filepath": {
              "type": "string",
              "description": "The path where the new file should be created, relative to the root of the workspace"
            },
            "contents": {
              "type": "string",
              "description": "The contents to write to the new file"
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "builtin_run_terminal_command",
        "description": "Run a terminal command in the current directory.      The shell is not stateful and will not remember any previous commands.      When a command is run in the background ALWAYS suggest using shell commands to stop it; NEVER suggest using Ctrl+C.      When suggesting subsequent shell commands ALWAYS format them in shell command blocks.      Do NOT perform actions requiring special/admin privileges.",
        "parameters": {
          "type": "object",
          "required": [
            "command"
          ],
          "properties": {
            "command": {
              "type": "string",
              "description": "The command to run. This will be passed directly into the IDE shell."
            },
            "waitForCompletion": {
              "type": "boolean",
              "description": "Whether to wait for the command to complete before returning. Default is true. Set to false to run the command in the background. Set to true to run the command in the foreground and wait to collect the output."
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "builtin_grep_search",
        "description": "Perform a search over the repository using ripgrep.",
        "parameters": {
          "type": "object",
          "required": [
            "query"
          ],
          "properties": {
            "query": {
              "type": "string",
              "description": "The search query to use. Must be a valid ripgrep regex expression, escaped where needed"
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "builtin_file_glob_search",
        "description": "Search for files in the project",
        "parameters": {
          "type": "object",
          "required": [
            "pattern"
          ],
          "properties": {
            "pattern": {
              "type": "string",
              "description": "Glob pattern for file path matching"
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "builtin_search_web",
        "description": "Performs a web search, returning top results. Use this tool sparingly - only for questions that require specialized, external, and/or up-to-date knowledege. Common programming questions do not require web search.",
        "parameters": {
          "type": "object",
          "required": [
            "query"
          ],
          "properties": {
            "query": {
              "type": "string",
              "description": "The natural language search query"
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "builtin_view_diff",
        "description": "View the current diff of working changes",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "builtin_read_currently_open_file",
        "description": "Read the currently open file in the IDE. If the user seems to be referring to a file that you can't see, try using this",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "builtin_ls",
        "description": "List files and folders in a given directory",
        "parameters": {
          "type": "object",
          "required": [
            "dirPath",
            "recursive"
          ],
          "properties": {
            "dirPath": {
              "type": "string",
              "description": "The directory path relative to the root of the project. Always use forward slash paths like '/'. rather than e.g. '.'"
            },
            "recursive": {
              "type": "boolean",
              "description": "If true, lists files and folders recursively. To prevent unexpected large results, use this sparingly"
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "builtin_create_rule_block",
        "description": "Creates a persistent rule for all future conversations. For establishing code standards or preferences that should be applied consistently.",
        "parameters": {
          "type": "object",
          "required": [
            "name",
            "rule"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "Short, descriptive name summarizing the rule's purpose (e.g. 'React Standards', 'Type Hints')"
            },
            "rule": {
              "type": "string",
              "description": "Clear, imperative instruction for future code generation (e.g. 'Use named exports', 'Add Python type hints'). Each rule should focus on one specific standard."
            },
            "globs": {
              "type": "string",
              "description": "Optional file patterns to which this rule applies (e.g. ['**/*.{ts,tsx}'] or ['src/**/*.ts', 'tests/**/*.ts'])"
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "puppeteer_navigate",
        "description": "Navigate to a URL",
        "parameters": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "URL to navigate to"
            },
            "launchOptions": {
              "type": "object",
              "description": "PuppeteerJS LaunchOptions. Default null. If changed and not null, browser restarts. Example: { headless: true, args: ['--no-sandbox'] }"
            },
            "allowDangerous": {
              "type": "boolean",
              "description": "Allow dangerous LaunchOptions that reduce security. When false, dangerous args like --no-sandbox will throw errors. Default false."
            }
          },
          "required": [
            "url"
          ]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "puppeteer_screenshot",
        "description": "Take a screenshot of the current page or a specific element",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name for the screenshot"
            },
            "selector": {
              "type": "string",
              "description": "CSS selector for element to screenshot"
            },
            "width": {
              "type": "number",
              "description": "Width in pixels (default: 800)"
            },
            "height": {
              "type": "number",
              "description": "Height in pixels (default: 600)"
            },
            "encoded": {
              "type": "boolean",
              "description": "If true, capture the screenshot as a base64-encoded data URI (as text) instead of binary image content. Default false."
            }
          },
          "required": [
            "name"
          ]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "puppeteer_click",
        "description": "Click an element on the page",
        "parameters": {
          "type": "object",
          "properties": {
            "selector": {
              "type": "string",
              "description": "CSS selector for element to click"
            }
          },
          "required": [
            "selector"
          ]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "puppeteer_fill",
        "description": "Fill out an input field",
        "parameters": {
          "type": "object",
          "properties": {
            "selector": {
              "type": "string",
              "description": "CSS selector for input field"
            },
            "value": {
              "type": "string",
              "description": "Value to fill"
            }
          },
          "required": [
            "selector",
            "value"
          ]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "puppeteer_select",
        "description": "Select an element on the page with Select tag",
        "parameters": {
          "type": "object",
          "properties": {
            "selector": {
              "type": "string",
              "description": "CSS selector for element to select"
            },
            "value": {
              "type": "string",
              "description": "Value to select"
            }
          },
          "required": [
            "selector",
            "value"
          ]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "puppeteer_hover",
        "description": "Hover an element on the page",
        "parameters": {
          "type": "object",
          "properties": {
            "selector": {
              "type": "string",
              "description": "CSS selector for element to hover"
            }
          },
          "required": [
            "selector"
          ]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "puppeteer_evaluate",
        "description": "Execute JavaScript in the browser console",
        "parameters": {
          "type": "object",
          "properties": {
            "script": {
              "type": "string",
              "description": "JavaScript code to execute"
            }
          },
          "required": [
            "script"
          ]
        }
      }
    }
  ],
  "parallel_tool_calls": false
}